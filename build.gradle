buildscript {
	ext {
		springBootVersion = '1.5.6.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		 classpath("io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE")
		
	}
}

apply plugin: 'java'

apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'war'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'maven-publish'

war{
	group = project.mavenGroupName
	baseName = project.mavenArtifactName
	//version is set by jenkins
	version = project.majorVersion+'.'+project.minorVersion+'.'+project.buildVersion+project.publishSuffix
	rootSpec.exclude('springbootcamel.properties')
	rootSpec.exclude('scripts/**')
}

//version = '0.0.1-SNAPSHOT'
sourceCompatibility = project.jdkVersion
targetCompatibility = project.jdkVersion

configurations{
	providedRuntime
}

eclipse{
	classpath{
		containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
	}
}

repositories {
	mavenCentral()
}


ext {
	springCloudVersion = 'Dalston.SR2'
}

dependencyManagement{
	compile{
		imports{
			mavenBom 'org.springframework:spring-framework-bom:4.2.2.RELEASE'
			mavenBom "org.springframework.boot:spring-boot-starter-parent:${springBootVersion}"
		}
	}
}

dependencies {
	compile('org.apache.camel:camel-spring-boot-starter:2.19.2')
	compile('org.springframework.cloud:spring-cloud-stream-binder-kafka')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-data-rest')
	compile('org.springframework.boot:spring-boot-starter-jdbc')
	compile('org.springframework.boot:spring-boot-starter-jersey')
	compile('org.springframework.kafka:spring-kafka')
	compile('org.springframework.boot:spring-boot-starter-mail')
	compile('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.0')
	compile('org.springframework.boot:spring-boot-starter-web')
	
	compile('org.springframework.boot:spring-boot-starter-logging')
	//compile('org.restlet.jee:org.restlet.ext.spring:2.2.3')
	compile('org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-web:4.2.4.RELEASE_1')
	//compile('com.microsoft.sqlserver:sqljdbc4:4.0')
	compile('org.springframework.security:spring-security-crypto:3.2.6.RELEASE')
	
	compile('org.apache.velocity:velocity:1.7')
	compile('org.springframework:spring-context-support:3.2.2.RELEASE')
	compile('org.apache.httpcomponents:httpclient:4.5.1')
	compile('org.yaml:snakeyaml:1.13')
	compile('org.jasypt:jasypt:1.9.2')
	compile('org.jasypt:jasypt-spring31:1.9.2')
	compile('com.googlecode.json-simple:json-simple:1.1.1')
	
	compile('commons-logging:commons-logging:1.1.1')
	compile('org.apache.commons:commons-lang3:3.0')
	//compile('com.oracle:ojdbc7:12.1.0.2.0')
	//compile('com.oracle.ons:12.1.0.2.0')
	//compile('com.oracle.ucp:ucp:12.1.0.2.0')	
	compile('org.mybatis:mybatis-spring:1.2.2')
	compile('org.mybatis:mybatis:3.2.2')
	compile('commons-dbcp:commons-dbcp:1.4')	
	//compile('com.oracle.ucp:ucp:12.1.0.2.0')
	
	
	runtime('mysql:mysql-connector-java')
	runtime('com.microsoft.sqlserver:mssql-jdbc')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	
	providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
}

//task to build a source jar
task sourceJar(type: Jar){
	//from sourceSets.main.alljava
}

task copyConfFiles(type: Copy){
	from "etc"
	include('*') //our configuration files
	into "$project.buildDir/config"
}

task copyScripts(type: Copy){
	from "src/main/resources/scripts"
	include('*') //our configuration files
	into "$project.buildDir/scripts"
}


dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

import org.apache.tools.ant.filters.*;
task tar(type: Tar,dependsOn :bootRepackage){
		dependsOn copyConfFiles
		dependsOn copyScripts
		
		def fileName = "${war.baseName}-${war.version}"
		from ("$buildDir/config"){
			include "**"
			into "config"
		}
		from ("$buildDir/scripts"){
			include "**"
			into "scripts"
		}
		archiveName "${fileName}.tar"
}

build.dependsOn(tar)

publishing{

	publications{
			//publishes WAR and deployables TAR.
			maven(MavenPublication){
			groupId "${war.group}"
			artifactId "${war.baseName}"
			version "${war.version}"
			artifact tar{
				classifier "deployables"
				extension "tar"
			}
			artifact war{
				extension "war"
			}
	
		}
	}

	//Publish artifacts to nexus
	repositories{
		maven{
			name "Snapshot"
			credentials {
					username "${project.username}"
					password "${project.password}"
			}
			url "${war.version.endsWith('-SNAPSHOT') ? "${project.snapshotRepoUrl}" : "${project.releaseRepoUrl}" }"
		}
	}
}

//sonar gradle sonarqube [ -Dsonar.host.url= ... -Dsonar.jdbc.url=... -Dsonar.jdbc.username=... -Dsonar.jdbs.password=...]

//sonarqube{
//	properties{
		//properties["sonar.exclusions"]="build/**/*"
//	}
//}

task wrapper(type:Wrapper){
 gradleVersion ='4.0.2'
}
//cobertura{
//	coverageFormats = ['html','xml']
//	coverageIgnoreTrivial =true
//	coverageIgnores = ['org.slf4j.Logger.*']
//	coverageReportDir = new File("$buildDir/reports/cobertura")
//}
//test.finalizedBy(project.task.cobertura)
